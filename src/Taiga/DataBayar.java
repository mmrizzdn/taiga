/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Taiga;

import static Taiga.Koneksi.getConnection;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author mansy
 */
public class DataBayar extends javax.swing.JFrame {

    /**
     * Creates new form DashboardMain
     */
private DefaultTableModel model;
    public DataBayar() {
        initComponents();
        // Initialize the model for jTable2
        model = new DefaultTableModel(
                new Object[][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String[] {
                    "Bulan", "Nominal", "Untuk", "Keterangan"
                }
        );

    // Set the model for jTable2
    jTable2.setModel(model);
    
        // Add a MouseListener to jTable2
    jTable2.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int selectedRow = jTable2.getSelectedRow();
            if (selectedRow != -1) {
                // Perform an action with the selected row data
                String bulan = model.getValueAt(selectedRow, 0).toString();
                int nominal = Integer.parseInt(model.getValueAt(selectedRow, 1).toString());
                String untuk = model.getValueAt(selectedRow, 2).toString();
                String keterangan = model.getValueAt(selectedRow, 3).toString();

                // Example action: display the selected row data in a dialog box
                String message = "Bulan: " + bulan + "\n"
                        + "Nominal: " + nominal + "\n"
                        + "Untuk: " + untuk + "\n"
                        + "Keterangan: " + keterangan;
                JOptionPane.showMessageDialog(null, message);
            }
        }
    });

    // Refresh the table data
    refreshTableData();
        
        JTable jTable2 = new javax.swing.JTable();
        // Mengatur ukuran default untuk tablet
        int tabletWidth = 800;
        int tabletHeight = 600;
        
        // Menambah faktor skala
        double scale = 1.2; // Faktor skala 1.2 akan membesarkan ukuran frame sebesar 20%
        int scaledWidth = (int) (tabletWidth * scale);
        int scaledHeight = (int) (tabletHeight * scale);
        
        Dimension scaledSize = new Dimension(scaledWidth, scaledHeight);
        setPreferredSize(scaledSize);
        
        // Mengatur warna latar belakang menjadi putih
        getContentPane().setBackground(Color.WHITE);
        
        pack(); // Atur ukuran frame secara otomatis
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnDataBayar = new javax.swing.JButton();
        btnDashboard = new javax.swing.JButton();
        btnDataWarga = new javax.swing.JButton();
        btnPengeluaran = new javax.swing.JButton();
        btnPengaturan = new javax.swing.JButton();
        btnPemasukan = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtCari = new javax.swing.JTextField();
        btnCari = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 153, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setForeground(new java.awt.Color(255, 153, 0));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("TAI");
        jPanel1.add(jLabel4);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 0, 51));
        jLabel3.setText("GA");
        jPanel1.add(jLabel3);

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel1.setText("Tagihan dan Iuran Warga");
        jPanel1.add(jLabel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btnDataBayar.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        btnDataBayar.setText("Data Bayar");
        btnDataBayar.setMaximumSize(new java.awt.Dimension(90, 35));
        btnDataBayar.setMinimumSize(new java.awt.Dimension(90, 30));
        btnDataBayar.setPreferredSize(new java.awt.Dimension(90, 30));
        btnDataBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataBayarActionPerformed(evt);
            }
        });

        btnDashboard.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        btnDashboard.setText("Dashboard");
        btnDashboard.setMaximumSize(new java.awt.Dimension(90, 35));
        btnDashboard.setMinimumSize(new java.awt.Dimension(90, 30));
        btnDashboard.setPreferredSize(new java.awt.Dimension(90, 30));
        btnDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDashboardActionPerformed(evt);
            }
        });

        btnDataWarga.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        btnDataWarga.setText("Data Warga");
        btnDataWarga.setMaximumSize(new java.awt.Dimension(90, 35));
        btnDataWarga.setMinimumSize(new java.awt.Dimension(90, 30));
        btnDataWarga.setPreferredSize(new java.awt.Dimension(90, 30));
        btnDataWarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataWargaActionPerformed(evt);
            }
        });

        btnPengeluaran.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        btnPengeluaran.setText("Pengeluaran");
        btnPengeluaran.setMaximumSize(new java.awt.Dimension(90, 35));
        btnPengeluaran.setMinimumSize(new java.awt.Dimension(90, 30));
        btnPengeluaran.setPreferredSize(new java.awt.Dimension(90, 30));
        btnPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPengeluaranActionPerformed(evt);
            }
        });

        btnPengaturan.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        btnPengaturan.setText("Pengaturan");
        btnPengaturan.setMaximumSize(new java.awt.Dimension(90, 35));
        btnPengaturan.setMinimumSize(new java.awt.Dimension(90, 30));
        btnPengaturan.setPreferredSize(new java.awt.Dimension(90, 30));
        btnPengaturan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPengaturanActionPerformed(evt);
            }
        });

        btnPemasukan.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        btnPemasukan.setText("Pemasukan");
        btnPemasukan.setMaximumSize(new java.awt.Dimension(90, 35));
        btnPemasukan.setMinimumSize(new java.awt.Dimension(90, 30));
        btnPemasukan.setPreferredSize(new java.awt.Dimension(90, 30));
        btnPemasukan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPemasukanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPengaturan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDataBayar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDataWarga, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDashboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPengeluaran, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnPemasukan, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(btnDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDataWarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDataBayar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(btnPemasukan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPengeluaran, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 277, Short.MAX_VALUE)
                .addComponent(btnPengaturan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 670));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 254, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 760, 620));

        jPanel4.setBackground(new java.awt.Color(255, 153, 0));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("DATA BAYAR");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(299, 299, 299)
                .addComponent(jLabel2)
                .addContainerGap(298, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 760, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDataBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataBayarActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Menutup frame saat ini
        DataBayar databayar = new DataBayar();
        databayar.setVisible(true);
    }//GEN-LAST:event_btnDataBayarActionPerformed

    private void btnPengaturanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPengaturanActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Menutup frame saat ini
        Pengaturan pengaturan = new Pengaturan();
        pengaturan.setVisible(true);
    }//GEN-LAST:event_btnPengaturanActionPerformed

    private void btnDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDashboardActionPerformed
        // TODO add your handling code here:DataWarga dataWarga = new DataWarga();
        this.dispose(); // Menutup frame saat ini
        DataBayar dashboardmain = new DataBayar();
        dashboardmain.setVisible(true);
        

            
    }//GEN-LAST:event_btnDashboardActionPerformed

    private void btnDataWargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataWargaActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Menutup frame saat ini
        DataWarga datawarga = new DataWarga();
        datawarga.setVisible(true);
    }//GEN-LAST:event_btnDataWargaActionPerformed

    private void btnPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPengeluaranActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Menutup frame saat ini
        Pengeluaran pengeluaran = new Pengeluaran();
        pengeluaran.setVisible(true);
    }//GEN-LAST:event_btnPengeluaranActionPerformed

    private void btnPemasukanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPemasukanActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Menutup frame saat ini
        Tagihan pemasukan = new Tagihan();
        pemasukan.setVisible(true);
    }//GEN-LAST:event_btnPemasukanActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        // Get the search criteria from the input field
        // Ambil kriteria pencarian dari input field
        String searchCriteria = txtCari.getText();

        // Panggil metode untuk melakukan pencarian
        performSearch(searchCriteria);

    }//GEN-LAST:event_btnCariActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataBayar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataBayar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataBayar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataBayar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataBayar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnDashboard;
    private javax.swing.JButton btnDataBayar;
    private javax.swing.JButton btnDataWarga;
    private javax.swing.JButton btnPemasukan;
    private javax.swing.JButton btnPengaturan;
    private javax.swing.JButton btnPengeluaran;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables
    
    // Fungsi untuk mengambil ulang data nama dari tabel data_warga
    private void refreshComboBox() {
        // Memanggil kelas Koneksi untuk melakukan koneksi ke database
        Connection conn = null;
        try {
            conn = Koneksi.getConnection();
        } catch (SQLException ex) {
            Logger.getLogger(Tagihan.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (conn != null) {
            try {
                // Query untuk mengambil data nama dari tabel data_warga
                String query = "SELECT nama FROM data_warga";
                Statement statement = conn.createStatement();
                ResultSet resultSet = statement.executeQuery(query);

                // Mengosongkan combo box sebelum menambahkan data baru
                jComboBox2.removeAllItems();

                // Menambahkan nama-nama dari tabel data_warga ke combo box
                while (resultSet.next()) {
                    String nama = resultSet.getString("nama");
                    jComboBox2.addItem(nama);
                }

                conn.close();
            } catch (SQLException e) {
            }
        }
    }

        private void refreshTableData() {
            try {
                // Clear the existing rows in the model
                model.setRowCount(0);

                // Connect to the database
                Connection conn = getConnection();

                // Query to retrieve data from the tagihan table
                String query = "SELECT * FROM tagihan";

                // Create a statement
                Statement stmt = conn.createStatement();

                // Execute the query and get the result set
                ResultSet rs = stmt.executeQuery(query);

                // Iterate through the result set and add rows to the model
                while (rs.next()) {
                    String bulan = rs.getString("bulan");
                    int nominal = rs.getInt("nominal");
                    String untuk = rs.getString("untuk");
                    String keterangan = rs.getString("keterangan");

                    model.addRow(new Object[]{bulan, nominal, untuk, keterangan});
                }

                // Close the result set, statement, and connection
                rs.close();
                stmt.close();
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Tagihan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    private void performSearch(String searchCriteria) {
        // Menghubungkan ke database
        Connection conn = null;
        try {
            conn = Koneksi.getConnection();
        } catch (SQLException ex) {
            Logger.getLogger(Tagihan.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (conn != null) {
            try {
                // Query untuk mencari data berdasarkan kriteria pencarian
                String query = "SELECT * FROM tagihan WHERE bulan LIKE ? OR nominal LIKE ? OR untuk LIKE ? OR keterangan LIKE ?";
                PreparedStatement statement = conn.prepareStatement(query);
                String likeCriteria = "%" + searchCriteria + "%";
                statement.setString(1, likeCriteria);
                statement.setString(2, likeCriteria);
                statement.setString(3, likeCriteria);
                statement.setString(4, likeCriteria);

                // Eksekusi query
                ResultSet result = statement.executeQuery();

                
                // Membuat model tabel
                DefaultTableModel tableModel = new DefaultTableModel();
                tableModel.addColumn("Nama");
                tableModel.addColumn("Bulan");
                tableModel.addColumn("Keterangan");
                tableModel.addColumn("Nominal");

                // Menyimpan data hasil pencarian dalam list
                List<String[]> rows = new ArrayList<>();
                int totalNominal = 0;
                
                // Tambahkan baris data hasil pencarian ke model tabel dan list
                while (result.next()) {
                    String untuk  = result.getString("untuk");
                    String bulan = result.getString("bulan");
                    String keterangan = result.getString("keterangan");
                    String nominal = result.getString("nominal");
                    
                    tableModel.addRow(new Object[]{untuk, bulan, keterangan, nominal});
                    rows.add(new String[]{untuk, bulan, keterangan, nominal});
                    
                    int Nominal = Integer.parseInt(nominal);
                    totalNominal = totalNominal + Nominal;
                }
                
                // Buat JTable dengan menggunakan model tabel
                JTable table = new JTable(tableModel);

                // Tampilkan tabel dalam JScrollPane
                JScrollPane scrollPane = new JScrollPane(table);
                
                // Menambahkan row untuk total nominal
                tableModel.addRow(new Object[]{});
                tableModel.addRow(new Object[]{"Total Nominal", "", "", totalNominal});
                rows.forEach((_item) -> {
                    tableModel.addRow(new Object[]{"Nama", _item});
                    
                });
                
                // Tampilkan dialog prompt dengan hasil pencarian
                Object[] options = {"Lunas", "Batal"};
                int option = JOptionPane.showOptionDialog(null, scrollPane, "Hasil Pencarian", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null);
                
                // Jika pengguna memilih tombol "Lunas", tampilkan struk pembayaran
                if (option == 0) {
                    // Membuat model tabel
                    DefaultTableModel tableModel2 = new DefaultTableModel();
                    for (String[] data : rows) {
                        tableModel2.addRow(new Object[]{});
                    }

                    // Buat JTable dengan menggunakan model tabel
                    JTable table2 = new JTable(tableModel2);

                    // Tampilkan tabel dalam JScrollPane
                    JScrollPane scrollPane2 = new JScrollPane(table2);

                    Object[] options2 = {"Cetak"};
                    int option2 = JOptionPane.showOptionDialog(null, scrollPane2, "Cetak Hasil", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options2, null);
                }

                // Tutup koneksi database
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
private void printTable(List<String[]> rows) {
    
}
    



 
        private static class jComboBox2 {

            private static void removeAllItems() {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }


            private static Object getSelectedItem() {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            private static void addItem(String nama) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            public jComboBox2() {
            }



        }

private boolean checkDataExistsInTagihan(String searchCriteria) throws SQLException {
        // Query to check if the data exists in the tagihan table
        String query = "SELECT * FROM tagihan WHERE untuk = '" + searchCriteria + "'";

        Connection conn = Koneksi.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        boolean dataFound = rs.next();

        rs.close();
        stmt.close();
        conn.close();

        return dataFound;
    }

        private String retrievePhoneNumberFromDataWarga(String searchCriteria) throws SQLException {
            // Query to retrieve the phone number from the data_warga table
            String query = "SELECT no_hp FROM data_warga WHERE <your_search_criteria>";

            Connection conn = Koneksi.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            String phoneNumber = "";

            if (rs.next()) {
                phoneNumber = rs.getString("no_hp");
            }

            rs.close();
            stmt.close();
            conn.close();

            return phoneNumber;
        }

        private String generateInvoiceDetailsFromTagihan(String searchCriteria) throws SQLException {
            // Query to retrieve the invoice details from the tagihan table
            String query = "SELECT nama, nominal, keterangan FROM tagihan WHERE <your_search_criteria>";

            Connection conn = Koneksi.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            String invoiceDetails = "";

            while (rs.next()) {
                String nama = rs.getString("nama");
                int nominal = rs.getInt("nominal");
                String keterangan = rs.getString("keterangan");

                // Append the invoice details to the invoiceDetails string
                invoiceDetails += "Nama: " + nama + ", Nominal: " + nominal + ", Keterangan: " + keterangan + "\n";
            }

            rs.close();
            stmt.close();
            conn.close();

            return invoiceDetails;
        }
}
        

